import pytest

from rusyll import rusyll


test_tokens = [
    "–∞",
    "–±",
    "–∞–∞",
    "–±–±",
    "–∞–±",
    "–±–∞",
    "–∞—Ä",
    "—Ä–∞",
    "–æ–Ω–æ",
    "–±–æ–±",
    "–±–∞—Ä–∂–∞",
    "–∑–≤–∞–Ω–Ω—ã–π",
    "–∫–∞—Ä–º–∞–Ω",
    "–∫–∞—Ä—Ç–∞",
    "–∫–∞—Ä–∞—Ç",
    "–ú—å—è–Ω–º–∞",
    "–º–∞–π–∫–∞",
    "–º–∞–π–Ω–∞",
    "—Ñ–µ–ª—å–¥—ä–µ–≥–µ—Ä—å",
    "—Ñ–∏–ª—å—Ç—Ä–ø—Ä–µ—Å—Å",
    "—Å–∏—Ä–µ–Ω–µ–≤–µ–Ω—å–∫–∏–π",
    "–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥",
    "–¥–ª–∏–Ω–Ω–æ—à–µ–µ–µ",
    "–∞–æ—Ä—Ç–∞",
    "–°–∞–∞–¥–∏",
    "",
]

test_token_reference = [
    ["–∞"],
    ["–±"],
    ["–∞", "–∞"],
    ["–±–±"],
    ["–∞–±"],
    ["–±–∞"],
    ["–∞—Ä"],
    ["—Ä–∞"],
    ["–æ", "–Ω–æ"],
    ["–±–æ–±"],
    ["–±–∞", "—Ä–∂–∞"],
    ["–∑–≤–∞", "–Ω–Ω—ã–π"],
    ["–∫–∞—Ä", "–º–∞–Ω"],
    ["–∫–∞—Ä", "—Ç–∞"],
    ["–∫–∞", "—Ä–∞—Ç"],
    ["–ú—å—è–Ω", "–º–∞"],
    ["–º–∞–π", "–∫–∞"],
    ["–º–∞–π", "–Ω–∞"],
    ["—Ñ–µ–ª—å", "–¥—ä–µ", "–≥–µ—Ä—å"],
    ["—Ñ–∏–ª—å", "—Ç—Ä–ø—Ä–µ—Å—Å"],
    ["—Å–∏", "—Ä–µ", "–Ω–µ", "–≤–µ–Ω—å", "–∫–∏–π"],
    ["–ô–æ", "—Ö–∞", "–Ω–Ω–µ", "—Å–±—É—Ä–≥"],
    ["–¥–ª–∏", "–Ω–Ω–æ", "—à–µ", "–µ", "–µ"],
    ["–∞", "–æ—Ä", "—Ç–∞"],
    ["–°–∞", "–∞", "–¥–∏"],
    [""],
]

test_words = [
    "",
    "–∞",
    "–∞–∞",
    "–∞–∞–∞",
    "-–∞–∞",
    "–∞–∞-",
    "-–∞-–∞-",
    "-",
    "--",
    "--–∞--–∞--",
]

test_word_reference = [
    [""],
    ["–∞"],
    ["–∞", "–∞"],
    ["–∞", "–∞", "–∞"],
    ["–∞", "–∞"],
    ["–∞", "–∞"],
    ["–∞", "–∞"],
    [""],
    [""],
    ["–∞", "–∞"],
]

test_words_reference_wd = [
    [""],
    ["–∞"],
    ["–∞", "–∞"],
    ["–∞", "–∞", "–∞"],
    ["-", "–∞", "–∞"],
    ["–∞", "–∞", "-"],
    ["-", "–∞", "-", "–∞", "-"],
    ["-"],
    ["-", "-"],
    ["-", "-", "–∞", "-", "-", "–∞", "-", "-"],
]


@pytest.mark.syllables
def test_token_to_syllables():
    test_token_results = []
    for token in test_tokens:
        test_token_results.append(rusyll.token_to_syllables(token))
    assert test_token_results == test_token_reference


@pytest.mark.syllables
def test_word_to_syllables():
    test_word_results = []
    for word in test_words:
        test_word_results.append(rusyll.word_to_syllables(word))
    assert test_word_results == test_word_reference


@pytest.mark.syllables
def test_word_to_syllables_safe__normal():
    test_reference_results = []
    test_function_results = []
    for token in test_tokens:
        test_reference_results.append(rusyll.word_to_syllables(token))
    for word in test_words:
        test_reference_results.append(rusyll.word_to_syllables(word))
    for token in test_tokens:
        test_function_results.append(rusyll.word_to_syllables_safe(token))
    for word in test_words:
        test_function_results.append(rusyll.word_to_syllables_safe(word))
    assert test_reference_results == test_function_results


@pytest.mark.parametrize("bad_word", ["–∞–±.", "ab", "–∞ –±", "–∞–±üí©", "–ê–ëZ", "–∞.–±", "–∞z–±"])
def test_word_to_syllables_safe__error(bad_word):
    with pytest.raises(AssertionError):
        rusyll.word_to_syllables_safe(bad_word)


@pytest.mark.syllables
def test_word_to_syllables_safe_wd__normal():
    test_reference_results = []
    test_function_results = []
    for token in test_tokens:
        test_reference_results.append(rusyll.word_to_syllables_wd(token))
    for word in test_words:
        test_reference_results.append(rusyll.word_to_syllables_wd(word))
    for token in test_tokens:
        test_function_results.append(rusyll.word_to_syllables_safe_wd(token))
    for word in test_words:
        test_function_results.append(rusyll.word_to_syllables_safe_wd(word))
    assert test_reference_results == test_function_results


@pytest.mark.parametrize("bad_word", ["–∞–±.", "ab", "–∞ –±", "–∞–±üí©", "–ê–ëZ", "–∞.–±", "–∞z–±"])
def test_word_to_syllables_safe_dw__error(bad_word):
    with pytest.raises(AssertionError):
        rusyll.word_to_syllables_safe_wd(bad_word)
